/************ Add: Sequences ***************/

CREATE SEQUENCE public.bitacora_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.bitacora_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.credencial_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.credencial_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.dato_usuario_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.dato_usuario_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.password_recovery_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.password_recovery_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.recordar_me_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.recordar_me_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.usuario_credencial_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.usuario_credencial_id_seq IS 'DbWrench Autogenerated Sequence.';

CREATE SEQUENCE public.usuario_id_seq INCREMENT BY 1;
COMMENT ON SEQUENCE public.usuario_id_seq IS 'DbWrench Autogenerated Sequence.';



/************ Update: Tables ***************/

/******************** Add Table: public.bitacora ************************/

/* Build Table Structure */
CREATE TABLE public.bitacora
(
	id BIGINT DEFAULT nextval('bitacora_id_seq'::regclass) NOT NULL,
	usuario_id BIGINT NOT NULL,
	accion VARCHAR(80) NOT NULL,
	tabla VARCHAR(80) NOT NULL,
	registro BIGINT NULL,
	observacion VARCHAR(1024) NULL,
	fecha TIMESTAMP DEFAULT now() NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.bitacora ADD CONSTRAINT pkbitacora
	PRIMARY KEY (id);

/* Add Indexes */
CREATE INDEX "bitacora_fecha_Idx" ON public.bitacora USING btree (fecha);

CREATE INDEX "bitacora_usuario_id_Idx" ON public.bitacora USING btree (usuario_id);


/******************** Add Table: public.credencial ************************/

/* Build Table Structure */
CREATE TABLE public.credencial
(
	id BIGINT DEFAULT nextval('credencial_id_seq'::regclass) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL,
	updated_at TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.credencial ADD CONSTRAINT pkcredencial
	PRIMARY KEY (id);

/* Add Indexes */
CREATE INDEX "credencial_deleted_at_Idx" ON public.credencial USING btree (deleted_at);


/******************** Add Table: public.dato_usuario ************************/

/* Build Table Structure */
CREATE TABLE public.dato_usuario
(
	id BIGINT DEFAULT nextval('dato_usuario_id_seq'::regclass) NOT NULL,
	usuario_id BIGINT NOT NULL,
	cedula VARCHAR(20) NOT NULL,
	nombre VARCHAR(80) NOT NULL,
	apellidos VARCHAR(80) NOT NULL,
	movil VARCHAR(12) NOT NULL,
	correo VARCHAR(120) NOT NULL,
	imagen VARCHAR(36) NULL,
	sexo BOOL NOT NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL,
	updated_at TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.dato_usuario ADD CONSTRAINT pkdato_usuario
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN public.dato_usuario.sexo IS 't = masculino ; f = femenino';

/* Add Indexes */
CREATE UNIQUE INDEX "dato_usuario_correo_Idx" ON public.dato_usuario USING btree (correo);

CREATE INDEX "dato_usuario_deleted_at_Idx" ON public.dato_usuario USING btree (deleted_at);

CREATE UNIQUE INDEX "dato_usuario_usuario_id_Idx" ON public.dato_usuario USING btree (usuario_id);


/******************** Add Table: public.password_recovery ************************/

/* Build Table Structure */
CREATE TABLE public.password_recovery
(
	id BIGINT DEFAULT nextval('password_recovery_id_seq'::regclass) NOT NULL,
	usuario_id BIGINT NOT NULL,
	hash VARCHAR(32) NOT NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.password_recovery ADD CONSTRAINT pkpassword_recovery
	PRIMARY KEY (id);

/* Add Indexes */
CREATE INDEX "password_recovery_hash_Idx" ON public.password_recovery USING btree (hash);

CREATE UNIQUE INDEX "password_recovery_usuario_id_Idx" ON public.password_recovery USING btree (usuario_id);


/******************** Add Table: public.recordar_me ************************/

/* Build Table Structure */
CREATE TABLE public.recordar_me
(
	id BIGINT DEFAULT nextval('recordar_me_id_seq'::regclass) NOT NULL,
	usuario_id BIGINT NOT NULL,
	ip_address VARCHAR(50) NOT NULL,
	hash_cookie VARCHAR(32) NOT NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.recordar_me ADD CONSTRAINT pkrecordar_me
	PRIMARY KEY (id);

/* Add Indexes */
CREATE UNIQUE INDEX "recordar_me_ip_address_hash_cookie_Idx" ON public.recordar_me USING btree (ip_address, hash_cookie);

CREATE INDEX "recordar_me_usuario_id_Idx" ON public.recordar_me USING btree (usuario_id);


/******************** Add Table: public.usuario ************************/

/* Build Table Structure */
CREATE TABLE public.usuario
(
	id BIGINT DEFAULT nextval('usuario_id_seq'::regclass) NOT NULL,
	user_name VARCHAR(80) NOT NULL,
	password VARCHAR(32) NOT NULL,
	actived BOOL DEFAULT 't' NOT NULL,
	last_login_at TIMESTAMP NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL,
	updated_at TIMESTAMP NULL,
	deleted_at TIMESTAMP NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.usuario ADD CONSTRAINT pkusuario
	PRIMARY KEY (id);

/* Add Comments */
COMMENT ON COLUMN public.usuario.actived IS 'TRUE = activado | FALSE = desactivado';

/* Add Indexes */
CREATE INDEX "usuario_actived_Idx" ON public.usuario USING btree (actived);

CREATE INDEX "usuario_deleted_at_Idx" ON public.usuario USING btree (deleted_at);

CREATE UNIQUE INDEX "usuario_user_name_Idx" ON public.usuario USING btree (user_name);

CREATE INDEX "usuario_user_name_password_Idx" ON public.usuario USING btree (user_name, password);


/******************** Add Table: public.usuario_credencial ************************/

/* Build Table Structure */
CREATE TABLE public.usuario_credencial
(
	id BIGINT DEFAULT nextval('usuario_credencial_id_seq'::regclass) NOT NULL,
	usuario_id BIGINT NOT NULL,
	credencial_id BIGINT NOT NULL,
	created_at TIMESTAMP DEFAULT now() NOT NULL
) WITHOUT OIDS;

/* Add Primary Key */
ALTER TABLE public.usuario_credencial ADD CONSTRAINT pkusuario_credencial
	PRIMARY KEY (id);

/* Add Indexes */
CREATE INDEX "usuario_credencial_credencial_id_Idx" ON public.usuario_credencial USING btree (credencial_id);

CREATE INDEX "usuario_credencial_usuario_id_Idx" ON public.usuario_credencial USING btree (usuario_id);

CREATE UNIQUE INDEX "usuario_credencial_usuario_id_credencial_id_Idx" ON public.usuario_credencial USING btree (usuario_id, credencial_id);




/************ Update: Procedures ***************/

/* Procedure: actualizar_fecha() */
CREATE OR REPLACE FUNCTION actualizar_fecha() 
  RETURNS trigger AS 
$$
    BEGIN
        IF ( TG_OP = 'UPDATE' ) THEN
            NEW.updated_at := now();
            RETURN NEW;
        END IF;
    END;
$$
  LANGUAGE plpgsql VOLATILE 
  COST 100;;



/************ Update: Triggers ***************/

/* Add Triggers */
CREATE TRIGGER actualizar_fecha_credencial
	BEFORE UPDATE ON public.credencial
	FOR EACH ROW EXECUTE PROCEDURE actualizar_fecha();

/* Add Triggers */
CREATE TRIGGER actualizar_fecha_dato_usuario
	BEFORE UPDATE ON public.dato_usuario
	FOR EACH ROW EXECUTE PROCEDURE actualizar_fecha();

/* Add Triggers */
CREATE TRIGGER actualizar_fecha_usuario
	BEFORE UPDATE ON public.usuario
	FOR EACH ROW EXECUTE PROCEDURE actualizar_fecha();

/************ Add Foreign Keys ***************/

/* Add Foreign Key: fk_bitacora_usuario */
ALTER TABLE public.bitacora ADD CONSTRAINT fk_bitacora_usuario
	FOREIGN KEY (usuario_id) REFERENCES public.usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_dato_usuario_usuario */
ALTER TABLE public.dato_usuario ADD CONSTRAINT fk_dato_usuario_usuario
	FOREIGN KEY (usuario_id) REFERENCES public.usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_password_recovery_usuario */
ALTER TABLE public.password_recovery ADD CONSTRAINT fk_password_recovery_usuario
	FOREIGN KEY (usuario_id) REFERENCES public.usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_recordar_me_usuario */
ALTER TABLE public.recordar_me ADD CONSTRAINT fk_recordar_me_usuario
	FOREIGN KEY (usuario_id) REFERENCES public.usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_usuario_credencial_credencial */
ALTER TABLE public.usuario_credencial ADD CONSTRAINT fk_usuario_credencial_credencial
	FOREIGN KEY (credencial_id) REFERENCES public.credencial (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;

/* Add Foreign Key: fk_usuario_credencial_usuario */
ALTER TABLE public.usuario_credencial ADD CONSTRAINT fk_usuario_credencial_usuario
	FOREIGN KEY (usuario_id) REFERENCES public.usuario (id)
	ON UPDATE RESTRICT ON DELETE RESTRICT;