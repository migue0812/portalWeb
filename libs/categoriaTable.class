<?php

use FStudio\model\base\usuarioBaseTable;

class usuarioTable extends usuarioBaseTable {

  public function getAll() {
    $conn = $this->getConnection($this->config);
    $sql = 'SELECT usu_id AS id, rol_id AS credencial_id, usu_usuario AS usuario, '
            . 'usu_password AS password, usu_activado AS activado, '
            . 'usu_last_login_at AS last_login_at, usu_created_at AS created_at, '
            . 'usu_updated_at AS updated_at, usu_deleted_at AS deleted_at '
            . 'FROM bd_usuario '
            . 'WHERE usu_deleted_at IS NULL '
            . 'ORDER BY usu_created_at ASC';
    $answer = $conn->prepare($sql);
    $answer->execute();
    return ($answer->rowCount() > 0) ? $answer->fetchAll(PDO::FETCH_OBJ) : false;
  }

  public function getById($id) {
    $conn = $this->getConnection($this->config);
    $sql = 'SELECT usu_id AS id, rol_id AS credencial_id, usu_usuario AS usuario, '
            . 'usu_password AS password, usu_activado AS activado, '
            . 'usu_last_login_at AS last_login_at, usu_created_at AS created_at, '
            . 'usu_updated_at AS updated_at, usu_deleted_at AS deleted_at '
            . 'FROM bd_usuario '
            . 'WHERE usu_deleted_at IS NULL '
            . 'AND usu_id = :id';
    $params = array(
        ':id' => $id
    );
    $answer = $conn->prepare($sql);
    $answer->execute($params);
    return ($answer->rowCount() > 0) ? $answer->fetchAll(PDO::FETCH_OBJ) : false;
  }

  public function save() {
    $conn = $this->getConnection($this->config);
    $sql = 'INSERT INTO usuario '
            . '(rol_id, usu_usuario, usu_password, usu_activado, usu_last_login_at) '
            . 'VALUES (:rol_id, :usuario, :password, :activado, :last_login_at)';
    $params = array(
        ':rol_id' => $this->getCredencialId(),
        ':usuario' => $this->getUserName(),
        ':password' => $this->getPassword(),
        ':activado' => $this->getActived(),
        ':last_login_at' => $this->getLastLoginAt()
    );
    $answer = $conn->prepare($sql);
    $answer->execute($params);
    return $conn->lastInsertId(self::_SEQUENCE);
  }

  public function update() {
    $conn = $this->getConnection($this->config);
    $sql = 'UPDATE bd_usuario SET '
            . 'rol_id = :rol_id, '
            . 'usu_usuario = :usuario, '
            . 'usu_password = :password, '
            . 'usu_activado = :activado, '
            . 'usu_last_login_at = :last_login_at '
            . 'WHERE usu_id = :id';
    $params = array(
        ':rol_id' => $this->getCredencialId(),
        ':usuario' => $this->getUserName(),
        ':password' => $this->getPassword(),
        ':activado' => $this->getActived(),
        ':last_login_at' => $this->getLastLoginAt(),
        ':id' => $this->getId()
    );
    $answer = $conn->prepare($sql);
    $answer->execute($params);
    return true;
  }

  public function delete($deleteLogical = true) {
    $conn = $this->getConnection($this->config);
    $params = array(
        ':id' => $this->getId()
    );
    switch ($deleteLogical) {
      case true:
        $sql = 'UPDATE bdp_categoria SET usu_deleted_at = now() WHERE cat_id = :id';
        break;
      case false:
        $sql = 'DELETE FROM bd_usuario WHERE cat_id = :id';
        break;
      default:
        throw new PDOException('Por favor indique un dato coherente para el borrado lógico (true) o físico (false)');
    }
    $answer = $conn->prepare($sql);
    $answer->execute($params);
    return true;
  }

}